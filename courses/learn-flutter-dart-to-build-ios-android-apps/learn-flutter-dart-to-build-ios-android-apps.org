# #+TITLE: Learn Flutter & Dart to Build iOS & Android Apps [2020], Udemy - Notes
#+AUTHOR: Alexandre Gressier
#+DATE: <2020-01-15 Wed>

Flutter version at the time of writing: v1.13.9

* 1 - Introduction

** What is Flutter?

Flutter: build native cross-platform apps
Dart
Single codebase

Flutter:
- The SDK (collection of tools)
  - Compiles to native machine code
- A framework widget library

Dart: focuses on frontend user interfaces
Developped by Google
Two different teams

OO & Strongly typed

Syntax similar to JS, Java, C#

Flutter is built in Dart


** Flutter architecture

Build UI as code (as opposed to a visual editor)
-> /Widget tree/

Embraces platform differences despite the single codebase

IMPORTANT: in Flutter, everything is a /widget/ (window gadget)
-> E.g., the whole page, buttons, text inputs

(Cupertino vs Material)


** How is it compiled to native apps

- Flutter API
- Dart code -> To different native codes via the Flutter SDK

Flutter provides high performance application

IMPORTANT: Flutter does not use platform primitives (e.g., no UIButton from iOS vs widget.Button from Android)
-> Instead Flutter has its custom implementations (controls every pixel on the screen)
-> Custom engine
-> Great control


** Flutter versions

Flutter versions change frequently
-> But no breaking changes (bug fixes, small improvements)


** Installing Flutter

Flutter is an SDK you have to uncompress

`flutter` is command line tool

#+BEGIN_SRC bash
$ flutter upgrade
#+END_SRC

Old website: flutter.io
New website: flutter.dev

Ensure you have a proper installation:
#+BEGIN_SRC bash
$ flutter doctor
#+END_SRC

Update PATH:
#+BEGIN_SRC bash
  # Homes
  export ANDROID_HOME="$HOME/sdk/android/sdk"

  ## Dart
  [ -d "/usr/lib/dart/bin" ] && export PATH="$PATH:/usr/lib/dart/bin"

  ## Flutter
  [ -d "$HOME/sdk/flutter/bin" ] && export PATH="$PATH:$HOME/sdk/flutter/bin"

  ## Android (VERIFIED!)
  [ -d "$HOME/sdk/android/tools" ] && export PATH="$PATH:$HOME/sdk/android/tools"
  [ -d "$HOME/sdk/android/platform-tools" ] && export PATH="$PATH:$HOME/sdk/android/platform-tools"
#+END_SRC

You also have a ~/.flutter file

IMPORTANT: You need Xcode to build iOS Flutter apps
-> Xcode command line tools

New flutter project:
#+BEGIN_SRC bash
$ flutter create first_app # Must not contain dashes or spaces
$ cd first_app
$ flutter run
#+END_SRC

Dart prefers snake case over lisp case

Change Pixel phone USB to PTP:
https://stackoverflow.com/questions/49216585/no-permissions-user-in-plugdev-group-are-your-udev-rules-wrong

Keep the process running for hot reload w/ <r> or exit it with <C-c>

Android Studio is also required for Android just like Xcode for iOS

IntelliJ > Tools > Android > AVD (Android Virtual Device) manager
The first tab is to choose the device (virtual and/or physical)

If you close the app on the device, the flutter run process will terminate

All the domain code you write is under /lib

Hot reload: preserve the current state of the app (<r>)
Hot restart: discard it (<R>)


** Material design

Flutter embraces Material Design (a Design System)
- Highly customizable
- Usable w/ Apple


** Alternatives to Flutter

Ionic: JS
-> Nothing is compiled (web app w/ native app wrapper)

React Native: JS + React.js
-> Partly compiled (UI components)

(also NativeScript)

Performance

No JS bridge in Flutter

FUNDAMENTAL: Flutter does nt compile to iOS / Android UI Components
-> Whereas Ionic does (problem: customization is not replicated accross platforms)
-> Ionic is a web app so it does not matter

Ionic uses Electron

Flutter might require a bit more work to obtain the default iOS & Android look since it does not use native components

Flutter killer feature is performance coupled w/ cross platform compatibility (+ hot reloading)


** Course structure

- Getting started
- Basics
- Debugging
- More widgets, styling, app logic
- Responsive & adaptive (i.e., adapting to the underlying platform) & UIs
- Widgets & Flutter internals
- Navigation & multiple screens
- State management (important)
- User input & forms
- Sending HTTP requests
- User authentication & session management
- Animations: providing a better feedback
- Using device features (e.g., camera, maps)
- Running native device code: running Java & Swift code
- Publishing an App
- Round up & "How to develop great apps"

Code along & do the exercices


* 2 - Flutter basics

- How a Flutter app starts & works
- Working w/ widgets & build custom widgets
- Reacting to user events
- Stateless & stateful widgets
- Dart fundamentals

/android is a real Android project part of the Flutter project you created

The Play Store logo when picking an virtual device denotes the presence of Google Play services

Non-debug mode permits a faster app

First launch always take a while

** Flutter project structure

- .idea/: configuration for IntelliJ IDEA/Android Studio
- android/: a complete Android project (w/ the compiled Flutter code) that the Flutter SDK will use to merge/inject w/ your Flutter code (mostly a passive directory)
- build/: the output of your Flutter application (passive directory)
- ios/: a complete Xcode project, the alter ego of Android for iOS (Apple forbids the generation of iOS apps on other platforms than macOS) (mostly a passive directory)
- lib/: important, stands for /library/, contains all of your .dart files (the main development directory)
- test/: enables us to write automated tests (ignored in this course)
- .gitignore
- .metadata: Flutter configuration to build your application correctly
- .packages: generated automatically by the Flutter SDK
- pubspec.lock: contains a snapshot of all the name of the dependencies and their versions (based on the content of pubspec.yaml)
- pubspec.yaml: manage our dependencies

main.dart is the main .dart file

#+begin_quote
The Flutter framework has been optimized to make rerunning build methods fast, so that you can just rebuild anything that
needs updating rather than having to individually change instances of widgets.
#+end_quote

Flutter = a SDK + a toolset

In addition to built in widgets, you can also build custom widgets
-> E.g., you can combine widgets (best if they are used more than once)


** Dart basics

https://dartpad.dev/ is useful to play with the Dart programming language

Dart is a strictly typed language

#+BEGIN_SRC dart
  num addNumbers(num num1, num num2) {
    return num1 + num2;
  }

  class Person {
    String name; // An instance variable
    int age = 0; // A default value
  }

  void main() { // A function definition (denoted by `()`)
    for (int i = 0; i < 5; ++i) {
      print('hello ${i + 1}'); // Statements ends w/ a `;`
    }
    print('Hello!');

    print(addNumbers(1, 2.3)); // A function invocation

    var result1 = addNumbers(5, 7); // A variable definition w/ type inference
    result1 = addNumbers(6, 8);
    print(result1);

    num result2 = addNumbers(1, 1); // Explicitly type annotation
    var result3; // A variable declaration

    String name = 'Alex';
    int age = 22;

    var alex = Person(); // Invoking the constructor
    print(alex.age);
    alex.name = 'Alex';
    print(alex.name);
  }
#+END_SRC

`void` is a type annotation for the result type
`main` is a special function (i.e., the entry point)
Dart recommends lower camel case for symbols & upper for class names
  
Dart has the `dynamic` type
Everything is an object in Dart
String delimiters are either `''` or `""`

An `int` is also a `double`
Dart also has the `num` type (an `int` or a `double`)

The result type of a function can be omitted
 
#+begin_quote
Objects have /members/ consisting of functions and data (/methods/ and /instance/ variables, respectively). When you
call a method, you /invoke/ it on an object: the method has access to that objectâ€™s functions and data.
#+end_quote

A /property/ is also an instance variable

The `void` result type for `main` is optional

The `new` keyword is optional since Dart 2


** Flutter app basics

Flutter is all about widgets
A /tree/ of widgets where the app is the root

A widget (i.e., window gadget) is an object
The App widget class
- Generally has the suffix "App"
- Should extend `StatelessWidget`

Note that Flutter is a dependency in the pubspec.yaml file:
#+BEGIN_SRC yaml
  dependencies:
    flutter:
      sdk: flutter
#+END_SRC

Import stuff from a package:
#+BEGIN_SRC dart
  import 'package:xxx/xxx.dart'
#+END_SRC

The name of overriden function's parameter can differ from the parent
-> Only the types count

`MaterialApp` only takes named arguments
`home` defines the main widget

IMPORTANT: `runApp` calls the `build` method of the passed widget

The text `Hello!' appears in red and underlined twice in yellow

The only piece of code required is a `main` function

Constructor have to be written explicitly in Dart:
#+BEGIN_SRC dart
  class Person {
    final String name; // `final` denotes immutable properties
    final String age;

    Person(this.name, this.age); // `this` enables the property to take the value of the argument
  }

  class PersonOld {
    final String name;
    final String age;

    PersonOld({String aName, int age = 30}) { // Named arguments (used when positions are overwhelming)
      name = aName;
      this.age = age;
    }
  }

  class PersonWeird {
    final String name;
    final String age;

    PersonWeird(String name, {this.age = 30}) {
      this.name = name;
    }
  }

  main() {
    var alex = new PersonOld(aName: 'Alex', age: 22);
  }
#+END_SRC

Flutter also has `@required`:
#+begin_quote
Used to annotate a named parameter p in a method or function f. Indicates that every invocation of f must include an
argument corresponding to p, despite the fact that p would otherwise be an optional parameter (e.g., a named one).
#+end_quote

Every widget must extend either `StatelessWidget` or `StatefulWidget`

`@override` is not required but a good practice

The `main` is often written as:
#+BEGIN_SRC dart
  main() => runApp(myApp()); // Result type is optional
#+END_SRC

`runApp` is part of material.dart

Basic Flutter App:
#+BEGIN_SRC dart
  //import ''; // The import syntax
  import 'package:flutter/material.dart';

  main() { // The entry point
    // This file should not be renamed
    runApp(MyApp()); // Pass an instance of Widget
  }

  class MyApp extends StatelessWidget {

    @override
    Widget build(BuildContext context) { // Needs to return a `Widget`
      return MaterialApp(home: Text('Hello!'),);
    }
  }
#+END_SRC

#+begin_quote
build() returns a so-called "widget tree" which tells Flutter what to draw onto the screen.
#+end_quote


** Widget basics

All the pixels on the screen are controlled by Flutter

`Scaffold` is another widget part of material.dart

`PreferredSizeWidget` generally refers to a widget that you could create by yourself but that is also available

`AppBar` corresponds to the material app bar (i.e., the bar at the top of the screen)
`title` takes a widget and not a `String`

`Text` is the "String widget"

FUNDAMENTAL: in Flutter, you compose user interfaces by composing widgets

Ending `,` are important for code formatting

Types of widgets:
- Output & input (visible): RaisedButton(), Text(), Card()...
- Layout & control (invisible): Row(), Column(), ListView()...
-> Containers() belongs to both categories

Column: stack items vertically
Row: stack items horizontally

#+BEGIN_SRC dart
  var questions = [ // Inferred type: List<String>
    'What\'s is your favorite color?',
    'What\'s is your favorite animal?',
  ];
#+END_SRC

#+BEGIN_SRC dart
  children: <Widget>[], // IMPORTANT: Type annotation is only required when the list is empty
#+END_SRC

If the onPressed parameter of a RaisedButton is `null`, then it is disabled

#+begin_quote
You pass widgets into the constructors of other Widgets to fill certain roles.
#+end_quote 


** Stateful & stateless widgets

`onPressed` takes a function (with the type `() => void`)

FUNDAMENTAL: The arrow `=>` for functions is used in both definitions and types

#+BEGIN_SRC dart
  RaisedButton(
    onPressed: printOk, // Function reference
    // Or
    onPressed: () => print('OK'), // Lambda (i.e., a single use function definition)
    // Or
    onPressed: () { print('OK'); }, // Lambda w/ body
  )
#+END_SRC

#+BEGIN_SRC dart
  var fruits = ['Apple', 'Banana', 'Cherry'] // Lists have a lot of built-in methods
  fruits[0] // `'Apple'`
  // Or
  fruits.elementAt(0) // `'Apple'`
#+END_SRC

#+BEGIN_SRC dart
  Text(questions[questionIndex]), // FUNDAMENTAL: this is not reactive and thus not redrawn automatically
#+END_SRC

IMPORTANT: all the properties of a stateless widgets must be `final` (warnings appear otherwise)

List must contain a single type (which can be ignored by aggregating types):
#+BEGIN_SRC dart
  var aMixedList = ['Some text', 1, 5.99, ['a nested list!', 1]]; // Inferred type: List<Object>
#+END_SRC

#+BEGIN_SRC dart
  aMixedList.length; // Get the length of the list
  aMixedList.add(25);
  aMixedList.remove(5.99);
#+END_SRC

State: the set of values stored under variables (as opposed to constants)

App state (e.g., principal) VS Widget state (e.g., counter)

Widgets that only output something should be stateless
-> `Text` are stateless

Stateless widgets receive input from their ctor
-> Rebuild the widget when input changes

FUNDAMENTAL: Stateful widgets gets re-rendered when ctor args or internal state changes

Convert a StatelessWidget to a StatefulWidget:
- Place your cursor onto StatelessWidget
- <M-RET> "Convert to StatefulWidget"
(When doing such, you'd better restart the application rather than hot reloading)

A StatefulWidget is a combination of 2 classes:
#+BEGIN_SRC dart
  class MyApp extends StatefulWidget {
    @override
    State<StatefulWidget> createState() { // Corresponds to State<MyApp>
      return MyAppState();
    }
  }

  class MyAppState extends State<MyApp> { // Usually has the suffix "State"'
    var questionIndex = 0;

    void answerQuestion() {
      setState(() { // Provided by State<T>
          questionIndex = questionIndex + 1;
          print(questionIndex);
      });
    }
  }
#+END_SRC
The widget can be recreated/rebuild once the state changes
However, the state is persistent and not recreated

Flutter does not re-render the whole application when a tap occurs
-> Tell Flutter to re-render a widget whenever the state changes

Most of the widgets are stateless

#+begin_quote
Whilst you can add (and also change) properties in a StatelessWidget, there's no way of telling Flutter that it should
re-run build() upon such changes.

All widgets (i.e. both Stateless and Stateful) can receive data via their constructors. But only StatefulWidgets can
have class properties where they can update values + re-run build().

setState() is a "trigger" that informs Flutter that it needs to re-run build() of the Widget.
#+end_quote


** Advanced Flutter & Dart basics

setState is a function that forces Flutter to re-render a part of the UI (i.e., the widget)
-> Re-invoke `build` which can seem costly at first glance

IMPORTANT: Flutter is optimized to go through the `build` method again as efficiently as possible
-> Does not redraw every pixel again


Every .dart file is its own mini library
-> Scope of the compilation unit

Prefix a symbol w/ `_` to make that symbol private to the compilation unit
#+BEGIN_SRC dart
  class _Person {
    final var _age = 12;
  
    void _answerQuestion() {
      print('OK');
    }
  }
#+END_SRC

Good convetion: 1 widget per file

Code snippets:
- `stless`: new stateless widget
- `stful`: new stateful widget

Imports should follow the following order:
- Imports from packages
- Imports from our own files

Make sure you convert your local imports to:
#+BEGIN_SRC dart
  // From
  import 'package:first_app/question.dart';
  // to
  import './question.dart';
#+END_SRC

You should split your bigger widgets into smaller widgets for better separating their concerns
-> Find the right balance though

The widget tree enables Flutter to call `build` method recursively

IMPORTANT: there is difference between Dart features and how Flutter uses that class
-> E.g., you can mutate a property w/o seeing change on the UI (b/c `build` is not re-invoked)

A `final` modifier denotes the immutability of a property
-> Thus it does not require an `_`

Text also has the `style` named argument

TextStyle is not a widget
TextAlign is an enum

IMPORTANT: the `Text` widget only allocates the minimum space it needs
-> Thus alignment will not be visible

Setting the width to infinity:
#+BEGIN_SRC dart
  return Container(
    child: Text(
      text,
      style: TextStyle(
        fontSize: 28,
      ),
      textAlign: TextAlign.center,
    ),
    width: double.infinity, // The full width of the device
  );
#+END_SRC

IMPORTANT: in Dart, everything is an object (even primitve type)

The `Container` widget enables you to space and align other widgets

Padding: the internal spacing part of the Container
Border: the stroke around the Container
Margin: the external spacing out of the container
Child: the content of Container

Margin and Padding expect an EdgeInsetsGeometry (e.g., EdgeInsets.all(10))
- all: all directions
- only: target a specific direction

IMPORTANT: a class can have multiple ctors and you can call them as methods on the object

`EdgeInsets` extends `EdgeInsetsGeometry`

Dart enables you to create multiple ctors for a given class by naming them (in addition to type erasures):
#+BEGIN_SRC dart
  class Person {
    String name;
    int age;

    Person(this.name, this.age);

    Person.veryOld(this.name) {
      this.age = 60;
    }
  }
#+END_SRC

Official Flutter documentation:
https://flutter.dev/docs

IMPORTANT: Just b/c a widget requires a lambda as input does not mean it has to be stateful
-> Moreover, a `RaisedButton` is a stateless widget

In Flutter, colors are represent as `static const` values (type: `MaterialColor`)
-> A grouping mechanism (having a human readable value)

/Lifting the state up/: manage the state on the common denomitator widget of other widgets

The term /callback/ denotes the fact that a literal function (i.e., a lambda) is not evaluated when passed

The `callback` property of `Answer` could also have been of type `Function` instead of the `VoidCallback`

The "handler" suffix is appropriate for variable names that store functions

Questions & answers could have been gathered in a domain object
-> But an ad-hoc map will be sufficient

In Dart, `Map` literals are delimited by `{}`
Unlike JSON, keys can be numbers

FUNDAMENTAL:
#+BEGIN_SRC dart
  var questions = [ // The inferred type is List<Map<String, Object>>> since String U List<String> = Object
    {
      'question': 'What is your favorite color?',
      'answers': ['Red', 'Yellow', 'Green', 'Blue'],
    },
    {
      'question': 'What is your favorite animal?',
      'answers': ['Dog', 'Cat', 'Bird', 'Fish'],
    },
    {
      'question': 'Who is your favorite superhero?',
      'answers': ['Superman', 'Batman', 'Spider-man', 'Iron man'],
    },
  ];
#+END_SRC

Approaches:
#+BEGIN_SRC dart
  ...(questions[_questionIndex]['answers'] as List<String>)
    .map((answer) => Answer(answer))
    .toList();
  // Or
  for (var answer in questions[_questionIndex]['answers']) Answer(answer, _answerQuestion),
 // `answer` is of type `dynamic`
#+END_SRC

IMPORTANT: `...` is the /spread/ operarator: it adds all the elements of the list to the parent list

`const` and `final` denotes immutability
`final` is equivalent to Scala's `val`
`final` can only be affected a value when declared (or using a ctor) and cannot be reaffected

FUNDAMENTAL:
- `final` is a run-time constant value
- `const` is a compile-time constant value (implictly means runtime constant)

The `const` modifier can also be applied to expressions:
#+BEGIN_SRC dart
  const fruits = const ['Apple', 'Banana', 'Cherry'];
#+END_SRC

The LHS `const` denotes the immutability of the reference while the RHS `const` denotes the immutability of the list
-> Therefore list operations are forbidden (e.g., `add`, `remove`)

Postal addresses and houses are a good analogy of the memory model of a computer
-> You do not put your house on the letter

FUNDAMENTAL: variables only stores references to objects

#+BEGIN_SRC dart
  var aList = const ['Hello'];
  aList.add('Max'); // Run-time error: `aList` is immutable
  aList = []; // Allowed since `aList` is a var
#+END_SRC

#+begin_quote
If the value is value you have is computed at runtime (e.g., `DateTime.now()`), you can not use a const for it.

If you're using const, you have to declare it as static const rather than just const (when dealing w/ properties).

If you have a const collection, everything inside of that is in const.
If you have a final collection, everything inside of that is not final.

Instance variables can be final but not const. Final instance variables must be initialized before the constructor
body starts â€” at the variable declaration, by a constructor parameter, or in the constructorâ€™s initializer list.

Compile-time constants are canonicalized. That means the no matter how many times you write "const Point(0,0)", you only
create one object.

Constants are not recreated each time. They are canonicalized at compile time and stored in special lookup tables (where they are hashed by their canonical signatures) from which they are later reused.
#+end_quote


** Last part

Dart also has conditional statements:
#+BEGIN_SRC dart
  if (true) {
    print(1);
  } else if (false) {
    print(2);
  } else {
    print(3);
  }
  isChecked ? Colors.white : Colors.black;
#+END_SRC

`null` exists in Dart (uninitialized state)

`Center` is a widget that centers its content horizontally & vertically

You can split complex widgets into sub widgets
IMPORTANT: In Flutter, it is always encouraged to create more than less widgets
-> Find the right balance though

REMEMBER: put the state in the common denomitator widget (here `MyApp`) and make all the other widget stateless
-> Put the state in the highest level that makes sense

Dart is designed to put `,` for the last element of a list (or any other data structure)

Prefix any property (even immutable) w/ an `_` to make it private

In Dart, string interpolation can be done even in `''` delimited strings

FUNDAMENTAL: this is the power of closures:
#+BEGIN_SRC dart
  callback: (() => _answerQuestion(_questions[_questionIndex]['points'])), // Tranforming a `(int) => void` into `() => void`
#+END_SRC

ESSENTIAL:
#+BEGIN_SRC dart
  class Foo {
    final Function callback; // Can take any argument

    Foo(this.callback);

    void bar() {
      callback(2131), // The `callback` that was passed to the ctor is of type `(int) => void`
    }
  }
#+END_SRC

Clean the pub cache:
#+BEGIN_SRC bash
  $ pub cache repair
#+END_SRC

A /getter/ is a mix of property and method
A getter cannot receive an argument
A getter is like a property, but the value is calculated dynamically

#+begin_quote
The value of explicit getters and setters is that you don't need to define both if you don't want.
#+end_quote

A `FlatButton` is basically a `RaisedButton` w/o a background color according to the Material design spec

Centering the `children` of a column vertically is not obvious
