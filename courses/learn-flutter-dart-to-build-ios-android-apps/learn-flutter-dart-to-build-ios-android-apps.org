# #+TITLE: Learn Flutter & Dart to Build iOS & Android Apps [2020], Udemy - Notes
#+AUTHOR: Alexandre Gressier
#+DATE: <2020-01-15 Wed>

Flutter version at the time of writing: v1.13.9

* 1 - Introduction

** What is Flutter?

Flutter: build native cross-platform apps
Dart
Single codebase

Flutter:
- The SDK (collection of tools)
  - Compiles to native machine code
- A framework widget library

Dart: focuses on frontend user interfaces
Developped by Google
Two different teams

OO & Strongly typed

Syntax similar to JS, Java, C#

Flutter is built in Dart


** Flutter architecture

Build UI as code (as opposed to a visual editor)
-> /Widget tree/

Embraces platform differences despite the single codebase

IMPORTANT: in Flutter, everything is a /widget/ (window gadget)
-> E.g., the whole page, buttons, text inputs

(Cupertino vs Material)


** How is it compiled to native apps

- Flutter API
- Dart code -> To different native codes via the Flutter SDK

Flutter provides high performance application

IMPORTANT: Flutter does not use platform primitives (e.g., no UIButton from iOS vs widget.Button from Android)
-> Instead Flutter has its custom implementations (controls every pixel on the screen)
-> Custom engine
-> Great control


** Flutter versions

Flutter versions change frequently
-> But no breaking changes (bug fixes, small improvements)


** Installing Flutter

Flutter is an SDK you have to uncompress

`flutter` is command line tool

#+BEGIN_SRC bash
$ flutter upgrade
#+END_SRC

Old website: flutter.io
New website: flutter.dev

Ensure you have a proper installation:
#+BEGIN_SRC bash
$ flutter doctor
#+END_SRC

Update PATH:
#+BEGIN_SRC bash
  # Homes
  export ANDROID_HOME="$HOME/sdk/android/sdk"

  ## Dart
  [ -d "/usr/lib/dart/bin" ] && export PATH="$PATH:/usr/lib/dart/bin"

  ## Flutter
  [ -d "$HOME/sdk/flutter/bin" ] && export PATH="$PATH:$HOME/sdk/flutter/bin"

  ## Android (VERIFIED!)
  [ -d "$HOME/sdk/android/tools" ] && export PATH="$PATH:$HOME/sdk/android/tools"
  [ -d "$HOME/sdk/android/platform-tools" ] && export PATH="$PATH:$HOME/sdk/android/platform-tools"
#+END_SRC

You also have a ~/.flutter file

IMPORTANT: You need Xcode to build iOS Flutter apps
-> Xcode command line tools

New flutter project:
#+BEGIN_SRC bash
$ flutter create first_app # Must not contain dashes or spaces
$ cd first_app
$ flutter run
#+END_SRC

Dart prefers snake case over lisp case

Change Pixel phone USB to PTP:
https://stackoverflow.com/questions/49216585/no-permissions-user-in-plugdev-group-are-your-udev-rules-wrong

Keep the process running for hot reload w/ <r> or exit it with <C-c>

Android Studio is also required for Android just like Xcode for iOS

IntelliJ > Tools > Android > AVD (Android Virtual Device) manager
The first tab is to choose the device (virtual and/or physical)

If you close the app on the device, the flutter run process will terminate

All the domain code you write is under /lib

Hot reload: preserve the current state of the app (<r>)
Hot restart: discard it (<R>)


** Material design

Flutter embraces Material Design (a Design System)
- Highly customizable
- Usable w/ Apple


** Alternatives to Flutter

Ionic: JS
-> Nothing is compiled (web app w/ native app wrapper)

React Native: JS + React.js
-> Partly compiled (UI components)

(also NativeScript)

Performance

No JS bridge in Flutter

FUNDAMENTAL: Flutter does nt compile to iOS / Android UI Components
-> Whereas Ionic does (problem: customization is not replicated accross platforms)
-> Ionic is a web app so it does not matter

Ionic uses Electron

Flutter might require a bit more work to obtain the default iOS & Android look since it does not use native components

Flutter killer feature is performance coupled w/ cross platform compatibility (+ hot reloading)


** Course structure

- Getting started
- Basics
- Debugging
- More widgets, styling, app logic
- Responsive & adaptive (i.e., adapting to the underlying platform) & UIs
- Widgets & Flutter internals
- Navigation & multiple screens
- State management (important)
- User input & forms
- Sending HTTP requests
- User authentication & session management
- Animations: providing a better feedback
- Using device features (e.g., camera, maps)
- Running native device code: running Java & Swift code
- Publishing an App
- Round up & "How to develop great apps"

Code along & do the exercices


* 2 - Flutter basics

- How a Flutter app starts & works
- Working w/ widgets & build custom widgets
- Reacting to user events
- Stateless & stateful widgets
- Dart fundamentals

/android is a real Android project part of the Flutter project you created

The Play Store logo when picking an virtual device denotes the presence of Google Play services

Non-debug mode permits a faster app

First launch always take a while

** Flutter project structure

- .idea/: configuration for IntelliJ IDEA/Android Studio
- android/: a complete Android project (w/ the compiled Flutter code) that the Flutter SDK will use to merge/inject w/ your Flutter code (mostly a passive directory)
- build/: the output of your Flutter application (passive directory)
- ios/: a complete Xcode project, the alter ego of Android for iOS (Apple forbids the generation of iOS apps on other platforms than macOS) (mostly a passive directory)
- lib/: important, stands for /library/, contains all of your .dart files (the main development directory)
- test/: enables us to write automated tests (ignored in this course)
- .gitignore
- .metadata: Flutter configuration to build your application correctly
- .packages: generated automatically by the Flutter SDK
- pubspec.lock: contains a snapshot of all the name of the dependencies and their versions (based on the content of pubspec.yaml)
- pubspec.yaml: manage our dependencies

main.dart is the main .dart file

#+begin_quote
The Flutter framework has been optimized to make rerunning build methods fast, so that you can just rebuild anything that
needs updating rather than having to individually change instances of widgets.
#+end_quote

Flutter = a SDK + a toolset

In addition to built in widgets, you can also build custom widgets
-> E.g., you can combine widgets (best if they are used more than once)


** Dart basics

https://dartpad.dev/ is useful to play with the Dart programming language

Dart is a strictly typed language

#+BEGIN_SRC dart
  num addNumbers(num num1, num num2) {
    return num1 + num2;
  }

  class Person {
    String name; // An instance variable
    int age = 0; // A default value
  }

  void main() { // A function definition (denoted by `()`)
    for (int i = 0; i < 5; ++i) {
      print('hello ${i + 1}'); // Statements ends w/ a `;`
    }
    print('Hello!');

    print(addNumbers(1, 2.3)); // A function invocation

    var result1 = addNumbers(5, 7); // A variable definition w/ type inference
    result1 = addNumbers(6, 8);
    print(result1);

    num result2 = addNumbers(1, 1); // Explicitly type annotation
    var result3; // A variable declaration

    String name = 'Alex';
    int age = 22;

    var alex = Person(); // Invoking the constructor
    print(alex.age);
    alex.name = 'Alex';
    print(alex.name);
  }
#+END_SRC

`void` is a type annotation for the result type
`main` is a special function (i.e., the entry point)
Dart recommends lower camel case for symbols & upper for class names
  
Dart has the `dynamic` type
Everything is an object in Dart
String delimiters are either `''` or `""`

An `int` is also a `double`
Dart also has the `num` type (an `int` or a `double`)

The result type of a function can be omitted
 
#+begin_quote
Objects have /members/ consisting of functions and data (/methods/ and /instance/ variables, respectively). When you
call a method, you /invoke/ it on an object: the method has access to that objectâ€™s functions and data.
#+end_quote

A /property/ is also an instance variable

The `void` result type for `main` is optional

The `new` keyword is optional since Dart 2
