#+TITLE: Ultimate AWS Certified Solutions Architect Associate, Udemy - Notes
#+AUTHOR: Alexandre Gressier
#+DATE: <2020-01-26 Sun>


* 1 - Course content

** Course introduction

https://aws.amazon.com

AWS Certified Solutions Architect Associate 
Exam: SAA-C01

Some knowledge is shared between the 3 certifications:
- Solutions Architect
- SysOps Administrator
- Developer

Covers over 30+ AWS services

Amazon Web Services is a /cloud provider/
-> Provides you w/ servers & services that you can use *on demand* & *scale easily*

Powers:
- amazon.com
- Netflix


** Creating an AWS Account

https://console.aws.amazon.com/

#+begin_quote
AWS Accounts Include 12 Months of Free Tier Access

Including use of Amazon EC2, Amazon S3, and Amazon DynamoDB
#+end_quote

https://aws.amazon.com/free

The free tier enables you to learn AWS

Requires:
- Phone number
- Credit card information
-> In case you excess the free tier limits


** AWS Account Activation Troubleshooting
   
https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/

Ensure to validate your account via the activation email

The validation process can take up to 24 hours
-> But usually take a few minutes

#+begin_quote
AWS cancels the authorization request as soon as it's approved by your financial institution
#+end_quote

https://aws.amazon.com/support


** AWS Budget Setup

Budget setup enables you to receive email alerts when overspending

Creating a budget:
- Account > My Billing Dashboard
- Cost Management > Create a budget
- Choose `Cost budget`
- Leave default options & set a fixed amount
  - TIP: put 0.01 USD to not spend money
- Configure alerts
- `Send alert based on: Actual Costs`
- `Alert thresold: 100% of budgeted amount`
- Add email contact
- Confirm budget

Checking bills:
- Billing > Bills
- Choose month
- Expand what interests you


** Important Message

This course has written subtitles


* 2 - Code & Slides download

https://courses.datacumulus.com/certified-solutions-architect-pn9


* 3 - AWS Fundamentals: IAM & EC2

** AWS Fundamentals - Section introduction

IAM: Amazon Identity and Access Management
-> Creating users, groups, & policies

EC2: Amazon Elastic Compute Cloud


** AWS Regions & AZs

AWS has regions all around the world:
- E.g., us-east-1, ap-southeast-2

Each region has availability zones (AZ):
- Ends up w/ a letter (goes up to `f` so far)
- E.g., us-east-1a, us-east-1b
- Each AZ maps to a physical data center in the region
  - Isolated from each others in case of disasters

Each AWS console is *region scoped*
- Except IAM & S3
- AZs are not shown in the console

Choosing a region:
- Choose the closest to you
- Choose one w/ at least 3 AZs

See a map of the regions:
https://aws.amazon.com/about-aws/global-infrastructure/


** IAM introduction
   
The whole AWS security resides in IAM
IAM is at the center of AWS (i.e., every console relates to it)

Managing:
- Users:
  - Are usually attributed to physical persons
- Groups: gather users
  - By function (e.g., admins, devops)
  - By team (e.g., engineering, design)
  - Permission tree
- Roles: internal usage w/in AWS resources
  - Are attributed to machines

The 3 interacts w/ /policies/:
- JSON documents
- Defines what each one can & cannot do

IMPORTANT: the *root account* should never be used & shared
- Use it only the very first time

Create users w/ proper permissions

IAM has a global view (i.e., region agnostic)

Multi Factor Authentication (MFA) can be setup

IAM has predefined /managed policies/

/Least privilege principle/
-> Attribute the minimal amount of permission required

IAM Federation:
- Meant for large enterprises owning an Active Directory (AD)
- Enables users to connect via LDAP
- Uses the /Security Assertion Markup Language/ (SAML) standard

Rules:
- 1 IAM user per physical person
- 1 IAM role per application
- Never share & write IAM credentials (especially in code)
- Never use the root account (except for initial setup)


** IAM hands on

The `Security Status` states what needs to be done in order to protect your AWS account:
- Delete your root access keys (root only)
- Activate MFA on your root account
- Create individual IAM users
- Use groups to assign permissions
- Apply an IAM password policy
- Rotate your access keys (Non-root only)

MFA:
- MFA setup is optional
- FreeOTP is FOSS Android application that works as well
- Enter the 1st code
- Wait 30 seconds
- Enter the 2nd code

Creating a super user (just under root):
- Add user
- Choose a user name
- Grant the `Programmatic` & `AWS Management Console` accesses
- Leave the `Autogenerated password` & `Require password reset`
- Next: Groups
- `Attach existing policies directly`
  - Select `AdministratorAccess`
- Set permissions boundary > Create user without a permissions boundary
- Create user

2 policies (permissions) attached:
- AdministratorAccess
- IAMUserChangePassword: forces the user to change its password

-> DO NOT FORGET to download the credentials as .csv (to have your password)

Creating a new group:
- Create new group
- Group Name: admin
- Attach Policy: AdministratorAccess

A group has its own set of permissions

Note that the permissions of the group are redundant w/ the user created previously:
- Detach the `AdministratorAccess` permission from the user

Manage group:
- Click on the group name from the list
- Define the permissions
- Create
- Add users

A password policy:
- Ensure that the password used are strong
- Are changed often enough

Creating a password policy:
- Set password policy button
- Enforce minimum password length: 8 characters
- Enable password expiration: 90 days
- Prevent password reuse: Remember 5 password(s) 
- Opinion: Tick all options except `Password expiration requires administrator reset`

You can create aliases for accounts
->  https://<alias>.signin.aws.amazon.com/console


** EC2 introduction

EC2: Amazon Elastic Compute Cloud
- The basis of AWS
- Were the way AWS worked for a long time
- One of the most popular service

Features:
- Renting virtual machines (EC2)
- Storing data on virtual drives (EBS: Elastic Block Store)
- Distributing load across machienes (ELB: Elastic Load Balancing)
- Scaling services using an ASG (Auto Scaling Groups)

Different from serverless technologies

Create a new EC2 instance:
-> Do not refresh the form!

- Make sure you are in the right region
- Launch Instance > Launch Instance button

- Choose an Amazon Machine Image (AMI): the OS that will be launched on that server
  - Notice the `Free tier eligible` AMIs
  - Choose an Amazon Linux (version 2) AMI to benefit from Amazon-specific stuff
  -> This is how Amazon sees you using Linux

- Choose an instance type (i.e., how powerful you want your machine to be)
  - t2.micro is free tier eligible
  - ATM max is 96 vCPUs & 768 GiBs memory

- Next: Configure Instance Details
  - You can launch several instances at a time
  - On-demand instances VS Spot instances
  - Choose the VPC & subnet (default subnet in AZ, which can be other than `a`)
  - Auto-assign Public IP: Use subnet setting (Enable)

Note: Every AWS account comes w/ a default VPC & 3 subnets (1 per AZ)

- Next: Add Storage
  - Block device name: `/dev/xvda`
  - Size: 8 GiB
  - Volume Type: General Purpose SSD (gp2)
  - Important: you can choose to not delete storage on EC2 termination

- Next: Add Tags
  - /Tags/ are key-value pairs
  - Enables you to identify that instance & classify it
  - Tags can also be defined to whatever you want
  - "Name": "My first instance"

- Next: Configure Security Group (SG)
  - Act as a firewall around your instance (i.e., controls inbound & outbound traffic)
  - Assign a security group: Create a new security group
  - Name: my-first-sg
  - Description: Created with my first EC2 instance
  - Source: My IP (0.0.0.0/0 - Opened to the world is not a best practice)
  - Has an SSH rule (port 22) by default

- Review Instance Launch
  - `Launch` button
  - Define what key pair will be used to access the instance
    - If you do not have one: Create a new key pair
    - Choose a name
    - `Download Key Pair` button (.pem file)
    - Key pairs can be accessed in EC2 > Network & Security > Key Pairs
  - `Launch instances` button

The instance has been named acccording to the "Name" tag
Instance State: `(Green) running` means that you can be billed

Right click on a instance record > Instance State to change the state of the instance
- Terminate: delete the instance & lose access to it
